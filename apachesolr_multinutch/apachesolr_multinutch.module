<?php

/**
 * @file
 * Implements functionality to integrate crawled sites with apachesolr_multisitesearch.
 *
 */

/**
 * Implements hook_entity_info().
 */
function apachesolr_multinutch_entity_info() {
  $info['apachesolr_multinutch_site'] = array(
    // A human readable label to identify our entity.
    'label' => t('Nutch Crawled Site'),

    // The controller for our Entity, extending the Drupal core controller.
    'controller class' => 'ApacheSolrMulitNutchSiteController',

    // The table for this entity defined in hook_schema()
    'base table' => 'apachesolr_multinutch_site',

    // Returns the uri elements of an entity
    'uri callback' => 'apachesolr_multinutch_site_uri',

    // IF fieldable == FALSE, we can't attach fields.
    'fieldable' => FALSE,

    // entity_keys tells the controller what database fields are used for key
    // functions. It is not required if we don't have bundles or revisions.
    // Here we do not support a revision, so that entity key is omitted.
    'entity keys' => array(
      'id' => 'site_id' ,
      'label' => 'sitename',
    ),
    // Apachesolr indexing info
    'apachesolr' => array(
      'indexable' => TRUE,
      'document callback' => array('apachesolr_multinutch_site_solr_document'),
    ),
  );

  return $info;
}

/**
 * Fetch a site object.
 *
 * This function ends up being a shim between the menu system and
 * apachesolr_multinutch_site_load_multiple().
 *
 * @param $site_id
 *   Integer specifying the site entity id.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   A fully-loaded $basic object or FALSE if it cannot be loaded.
 *
 * @see apachesolr_multinutch_site_load_multiple()
 * @see apachesolr_multinutch_menu()
 */
function apachesolr_multinutch_site_load($site_id = NULL, $reset = FALSE) {
  $ids = (isset($site_id) ? array($site_id) : array());
  $sites = apachesolr_multinutch_site_load_multiple($ids, array(), $reset);
  return $sites ? reset($sites) : FALSE;
}

/**
 * Loads multiple site entities.
 *
 * We only need to pass this request along to entity_load(), which
 * will in turn call the load() method of our entity controller class.
 */
function apachesolr_multinutch_site_load_multiple($ids = FALSE, $conditions = array(), $reset = FALSE) {
  return entity_load('apachesolr_multinutch_site', $ids, $conditions, $reset);
}

/**
 * Implements the uri callback.
 */
function apachesolr_multinutch_site_uri($site) {
  return array(
    'path' => 'admin/config/search/apachesolr_multinutch/site/' . $site->site_id,
  );
}

/**
 * Implements hook_menu().
 */
function apachesolr_multinutch_menu() {
  $items['admin/config/search/apachesolr_multinutch'] = array(
    'title' => 'ApacheSolr Multisite Nutch Sites',
    'description' => 'Manage site metadata and generate nutch configurations.',
    'page callback' => 'apachesolr_multinutch_info_page',
    'access arguments' => array('view any apachesolr_multinutch_site entity'),
  );


  // Add example entities.
  $items['admin/config/search/apachesolr_multinutch/add'] = array(
    'title' => 'Add an ApacheSolr Multisite Nutch Site Entity',
    'page callback' => 'apachesolr_multinutch_site_add',
    'access arguments' => array('administer apachesolr_multinutch'),
    'type' => MENU_LOCAL_ACTION,
  );

  // List of all apachesolr_multinutch_site entities.
  $items['admin/config/search/apachesolr_multinutch/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  // The page to view a site's info
  $items['admin/config/search/apachesolr_multinutch/site/%apachesolr_multinutch_site'] = array(
    'title callback' => 'apachesolr_multinutch_site_title',
    'title arguments' => array(5),
    'page callback' => 'apachesolr_multinutch_site_view',
    'page arguments' => array(5),
    'access arguments' => array('view any apachesolr_multinutch_site entity'),
  );

  // 'View' tab for an individual entity page.
  $items['admin/config/search/apachesolr_multinutch/site/%apachesolr_multinutch_site/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  // 'Edit' tab for an individual entity page.
  $items['admin/config/search/apachesolr_multinutch/site/%apachesolr_multinutch_site/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('apachesolr_multinutch_site_form', 5),
    'access arguments' => array('administer apachesolr_multinutch'),
    'type' => MENU_LOCAL_TASK,
  );
  // 'Generate' tab for an individual entity page.
  $items['admin/config/search/apachesolr_multinutch/site/%apachesolr_multinutch_site/generate'] = array(
    'title' => 'Generate Nutch Config',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('apachesolr_multinutch_generate_form', 5),
    'access arguments' => array('administer apachesolr_multinutch'),
    'type' => MENU_LOCAL_TASK,
  );

  // 'Delete' confirm page for an individual entity.
  $items['admin/config/search/apachesolr_multinutch/site/%apachesolr_multinutch_site/delete'] = array(
    'title' => 'Delete site',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('apachesolr_multinutch_site_delete_confirm', 5),
    'access arguments' => array('administer apachesolr_multinutch'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Basic overview page.
 */
function apachesolr_multinutch_info_page() {

  $content['table'] = apachesolr_multinutch_site_list_entities();
  $content['config'] = drupal_get_form('apachesolr_multinutch_global_config_form');

  return $content;
}


function apachesolr_multinutch_global_config_form($form, &$form_state) {
  $form = array();
  $form['apachesolr_multinutch_nutch_path'] = array(
    '#type' => 'textfield',
    '#title' => t('Path to nutch'),
    '#required' => TRUE,
    '#default_value' => variable_get('apachesolr_multinutch_nutch_path', ''),
  );
  return system_settings_form($form);
}

function apachesolr_multinutch_global_config_form_validate($form, &$form_state) {
  $conf_dir = $form_state['values']['apachesolr_multinutch_nutch_path'] . '/conf';
  if (!file_exists($conf_dir) || !is_dir($conf_dir)) {
    form_set_error('apachesolr_multinutch_nutch_path', t('Invalid path - no conf directory'));
  }
}

/**
 * Implements hook_permission().
 */
function apachesolr_multinutch_permission() {
  $permissions = array(
    'administer apachesolr_multinutch' =>  array(
      'title' => t('Administer ApacheSolr Multisite Nutch'),
    ),
    'view any apachesolr_multinutch_site entity' => array(
      'title' => t('View any ApacheSolr Multisite Nutch Site entity'),
    ),
  );
  return $permissions;
}

/**
 * Returns a render array with all apachesolr_multinutch_site entities.
 */
function apachesolr_multinutch_site_list_entities() {
  $content = array();
  // Load all of our entities.
  $sites = apachesolr_multinutch_site_load_multiple();
  if (!empty($sites)) {
    foreach ($sites as $site) {
      // Create tabular rows for our entities.
      $uri = apachesolr_multinutch_site_uri($site);
      $row = array(
        'data' => array(
          'name' => l($site->sitename, $uri['path']),
          'description' => check_plain($site->description),
          'url' => l($site->site_url, $site->site_url),
        ),
      );
      if (user_access('administer apachesolr_multinutch')) {
        $row['data']['edit'] = l(t('edit'), $uri['path'] . '/edit');
        $row['data']['generate'] = l(t('generate'), $uri['path'] . '/generate');
      }
      $rows[] = $row;
    }
    // Put our entities into a themed table. See theme_table() for details.
    $content['site_table'] = array(
      '#theme' => 'table',
      '#rows' => $rows,
      '#header' => array(t('Name'), t('Description'), t('URL')),
    );
    if (user_access('administer apachesolr_multinutch')) {
      $content['site_table']['#header'][] = array('data' => t('Operations'), 'colspan' => 2);
    }
  }
  else {
    // There were no entities. Tell the user.
    $content[] = array(
      '#type' => 'item',
      '#markup' => t('No apachesolr_multinutch_site entities currently exist.'),
    );
  }
  return $content;
}

/**
 * Callback for a page title when this entity is displayed.
 */
function apachesolr_multinutch_site_title($entity) {
  return check_plain($entity->sitename);
}

/**
 * Menu callback to display an entity.
 *
 * As we load the entity for display, we're responsible for invoking a number
 * of hooks in their proper order.
 *
 * @see hook_entity_prepare_view()
 * @see hook_entity_view()
 * @see hook_entity_view_alter()
 */
function apachesolr_multinutch_site_view($entity, $view_mode = 'default') {
  // Our entity type, for convenience.
  $entity_type = 'apachesolr_multinutch_site';
  // Start setting up the content.
  $entity->content = array(
    '#view_mode' => $view_mode,
  );
  // We call entity_prepare_view() so it can invoke hook_entity_prepare_view()
  // for us.
  entity_prepare_view($entity_type, array($entity->site_id => $entity));

  $entity->content['sitename'] = array(
    '#type' => 'item',
    '#title' => t('Site Name'),
    '#markup' => check_plain($entity->sitename),
  );
  $entity->content['description'] = array(
    '#type' => 'item',
    '#title' => t('Site Description'),
    '#markup' => check_plain($entity->description),
  );
  $entity->content['http_agent_name'] = array(
    '#type' => 'item',
    '#title' => t('User agent'),
    '#markup' => check_plain($entity->http_agent_name),
  );
  $entity->content['url'] = array(
    '#type' => 'link',
     '#title' => $entity->site_url,
     '#href' => $entity->site_url,
  );
  $entity->content['created'] = array(
    '#type' => 'item',
    '#title' => t('Created date'),
    '#markup' => format_date($entity->created),
  );
  // Now to invoke some hooks. We need the language code for
  // hook_entity_view(), so let's get that.
  global $language ;
  $langcode = $language->language ;
  // And now invoke hook_entity_view().
  module_invoke_all('entity_view', $entity, $entity_type, $view_mode, $langcode);
  // Now invoke hook_entity_view_alter().
  drupal_alter(array('apachesolr_multinutch_site_view', 'entity_view'), $entity->content, $entity_type);

  // And finally return the content.
  return $entity->content;
}


/**
 * Provides a wrapper on the edit form to add a new entity.
 */
function apachesolr_multinutch_site_add() {
  // Create a basic entity structure to be used and passed to the validation
  // and submission functions.
  $entity = entity_get_controller('apachesolr_multinutch_site')->create();
  return drupal_get_form('apachesolr_multinutch_site_form', $entity);
}

/**
 * Form function to create an apachesolr_multinutch_site entity.
 *
 * The pattern is:
 * - Set up the form for the data that is specific to your
 *   entity: the columns of your base table.
 * - Call on the Field API to pull in the form elements
 *   for fields attached to the entity.
 */
function apachesolr_multinutch_site_form($form, &$form_state, $entity) {
  $form['sitename'] = array(
    '#type' => 'textfield',
    '#title' => t('Site name (human readable)'),
    '#required' => TRUE,
    '#default_value' => $entity->sitename,
  );
  $form['site_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Site url (homepage)'),
    '#required' => TRUE,
    '#default_value' => $entity->site_url,
  );
  $form['hash'] = array(
    '#type' => 'textfield',
    '#title' => t('Unique string ID for multisite search integration'),
    '#required' => TRUE,
    '#default_value' => $entity->hash,
  );
  $form['bundle_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Human readable pseduo-content type name (no white space)'),
    '#required' => TRUE,
    '#default_value' => $entity->bundle_name,
  );
  $form['http_agent_name'] = array(
    '#type' => 'textfield',
    '#title' => t('HTTP user agent'),
    '#required' => TRUE,
    '#default_value' => $entity->http_agent_name,
  );
  $form['index_metadata'] = array(
    '#type' => 'checkbox',
    '#title' => t('Index meta tag content'),
    '#default_value' => $entity->index_metadata,
  );
  $form['description'] = array(
    '#type' => 'textfield',
    '#title' => t('Site Description'),
    '#required' => FALSE,
    '#default_value' => $entity->description,
  );

  $form['site_entity'] = array(
    '#type' => 'value',
    '#value' => $entity,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
    '#weight' => 100,
  );
  $form['delete'] = array(
    '#type' => 'submit',
    '#value' => t('Delete'),
    '#submit' => array('apachesolr_multinutch_site_edit_delete'),
    '#weight' => 200,
  );

  return $form;
}


/**
 * Validation handler for apachesolr_multinutch_site_add_form form.
 * We pass things straight through to the Field API to handle validation
 * of the attached fields.
 */
function apachesolr_multinutch_site_form_validate($form, &$form_state) {
  // @todo - customize this rather than having it be so general.
  if (!valid_url($form_state['values']['site_url'], TRUE)) {
    form_set_error('site_url', t('Invalid URL'));
  }
  // These cannot have white space in them in the nutch config.
  if (preg_match('/\s/', $form_state['values']['hash'])) {
    form_set_error('hash', t('Site ID cannot have spaces in it'));
  }
  if (preg_match('/\s/', $form_state['values']['bundle_name'])) {
    form_set_error('bundle_name', t('Cantent type name cannot have spaces in it'));
  }
}


/**
 * Form submit handler: submits basic_add_form information
 */
function apachesolr_multinutch_site_form_submit($form, &$form_state) {
  $site = $form_state['values']['site_entity'];
  foreach (array('sitename', 'site_url', 'hash', 'bundle_name', 'description', 'http_agent_name', 'index_metadata') as $key) {
    if (isset($form_state['values'][$key])) {
      $site->{$key} = $form_state['values'][$key];
    }
  }
  $entity = apachesolr_multinutch_site_save($site);
  $form_state['redirect'] = 'admin/config/search/apachesolr_multinutch';
}

/**
 * Form deletion handler.
 *
 */
function apachesolr_multinutch_site_edit_delete($form , &$form_state) {
  $entity = $form_state['values']['basic_entity'];
  $form_state['redirect'] = 'admin/config/search/apachesolr_multinutch/site/' . $entity->site_id . '/delete';
}

function apachesolr_multinutch_site_delete_confirm($form , &$form_state, $entity) {
  $form = array();
  $form['site'] = array(
    '#type' => 'value',
    '#value' => $entity,
  );
  $form = confirm_form($form, t('Are you sure you want to delete this site?'), 'admin/config/search/apachesolr_multinutch');
  return $form;
}

function apachesolr_multinutch_site_delete_confirm_submit($form , &$form_state) {
  apachesolr_multinutch_site_delete($form_state['values']['site']->id);
  drupal_set_message(t('The site %sitename (ID @id) has been deleted',
    array('@id' => $form_state['values']['site']->id, '%sitename' => $form_state['values']['site']->sitename))
  );
  $form_state['redirect'] = 'admin/config/search/apachesolr_multinutch';
}

/**
 * We save the entity by calling the controller.
 */
function apachesolr_multinutch_site_save(&$entity) {
  return entity_get_controller('apachesolr_multinutch_site')->save($entity);
}

/**
 * Use the controller to delete the entity.
 */
function apachesolr_multinutch_site_delete($entity) {
  entity_get_controller('apachesolr_multinutch_site')->delete($entity);
}

function apachesolr_multinutch_generate_form($form , &$form_state, $entity) {
  $form = array();
  $form['text'] = array(
    '#prefix' => '<p>',
    '#markup' => t('Click below to generate nutch conf files using this site\'s values.'),
    '#suffix' => '</p>',
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Generate'),
  );
  $form['site'] = array(
    '#type' => 'value',
    '#value' => $entity,
  );
  return $form;
}

function apachesolr_multinutch_generate_form_validate($form , &$form_state) {
  $source = variable_get('apachesolr_multinutch_nutch_path', '');
  if (!$source) {
    form_set_error('', t('Missing nutch path for source conf files'));
  }
}

function apachesolr_multinutch_generate_form_submit($form, &$form_state) {
  $site = $form_state['values']['site'];
  $top_dir = 'public://apachesolr_multinutch';
  file_prepare_directory($top_dir, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS);
  $dest_dir = 'public://apachesolr_multinutch/' . $site->site_id;
  file_prepare_directory($dest_dir, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS);
  $urls_dir = "$dest_dir/urls";
  file_prepare_directory($urls_dir, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS);
  $source = variable_get('apachesolr_multinutch_nutch_path', '') . '/conf';
  foreach (glob($source . '/*') as $filename) {
    $dest = $dest_dir . '/' . basename($filename);
    _apachesolr_multinutch_copy($filename, $dest);
  }
  $templates_dir = drupal_get_path('module', 'apachesolr_multinutch') . '/templates';
  foreach (array('prefix-urlfilter.txt', 'solrindex-mapping.xml', 'suffix-urlfilter.txt') as $name) {
    _apachesolr_multinutch_copy("$templates_dir/$name", "$dest_dir/$name");
  }
  $parts = parse_url($site->site_url);
  $domain = $parts['host'];
  if (!empty($parts['port'])) {
    $domain .= ":{$parts['port']}";
  }
  if (!empty($parts['path'])) {
    $domain .= $parts['path'];
  }
  else {
    $domain .= '/';
  }
  $variables = array(
    'urlfilter_domain' => $domain,
  );
  $urlfilter = theme_render_template($templates_dir . '/regex-urlfilter.tpl.php', $variables);
  file_put_contents("$dest_dir/regex-urlfilter.txt", $urlfilter);
  $index_static_fields = array('hash:' . $site->hash);
  if ($site->index_static_fields && strpos($site->index_static_fields, ':')) {
    $index_static_fields = array_merge($index_static_fields, explode('\n', trim($site->index_static_fields)));
  }
  $variables = array(
    'http_agent_name' => $site->http_agent_name,
    'index_metadata' => $site->index_metadata ? "|metadata" : '',
    'index_static_fields' => $index_static_fields,
  );
  $nutch_site = theme_render_template($templates_dir . '/nutch-site.tpl.php', $variables);
  file_put_contents("$dest_dir/nutch-site.xml", $nutch_site);
  file_put_contents("$urls_dir/seed.txt", $site->site_url . "\n");
  drupal_set_message(t('Generated conf at @dest_dir', array('@dest_dir' => drupal_realpath($dest_dir))));
}

function _apachesolr_multinutch_copy($source, $destination) {
  if (!@copy($source, $destination)) {
    // If the copy failed and realpaths exist, retry the operation using them
    // instead.
    $real_source = drupal_realpath($source);
    $real_destination = drupal_realpath($destination);
    if ($real_source === FALSE || $real_destination === FALSE || !@copy($real_source, $real_destination)) {
      drupal_set_message(t('Moving @source to @destination failed', array('@source' => $source, '@destination' => $destination)), 'error');
    }
  }
}

/**
 * EntityExampleBasicControllerInterface definition.
 *
 * We create an interface here because anyone could come along and
 * use hook_entity_info_alter() to change our controller class.
 * We want to let them know what methods our class needs in order
 * to function with the rest of the module, so here's a handy list.
 *
 * @see hook_entity_info_alter()
 */

interface ApacheSolrMultiNutchControllerInterface
  extends DrupalEntityControllerInterface {
  public function create();
  public function save($entity);
  public function delete($entity);
}

/**
 * EntityExampleBasicController extends DrupalDefaultEntityController.
 *
 * Our subclass of DrupalDefaultEntityController lets us add a few
 * important create, update, and delete methods.
 */
class ApacheSolrMulitNutchSiteController
  extends DrupalDefaultEntityController
  implements ApacheSolrMultiNutchControllerInterface {

  /**
   * Create and return a new apachesolr_multinutch_site entity.
   */
  public function create() {
    $entity = new stdClass();
    $entity->type = 'apachesolr_multinutch_site';
    $entity->site_id = NULL;
    $entity->site_url = '';
    $entity->description = '';
    $entity->sitename = '';
    $entity->hash = $this->genetate_hash();
    $entity->index_metadata = 0;
    $entity->index_static_fields = '';
    $entity->http_agent_name = '';
    $entity->bundle_name = 'Crawled' . $entity->hash;
    return $entity;
  }

  protected function genetate_hash() {
    // Ganerate a random 6 digit base-36 number as the hash.
    return substr(base_convert(sha1(uniqid(mt_rand(), TRUE)), 16, 36), 0, 6);
  }

  /**
   * Saves the custom fields using drupal_write_record()
   */
  public function save($entity) {
    // If our entity has no site_id, then we need to give it a
    // time of creation.
    if (empty($entity->site_id)) {
      $entity->created = time();
    }
    // Invoke hook_entity_presave().
    module_invoke_all('entity_presave', $entity, 'apachesolr_multinutch_site');
    // The 'primary_keys' argument determines whether this will be an insert
    // or an update. So if the entity already has an ID, we'll specify
    // basic_id as the key.
    $primary_keys = $entity->site_id ? array('site_id') : array();
    // Write out the entity record.
    drupal_write_record('apachesolr_multinutch_site', $entity, $primary_keys);
    // We're going to invoke either hook_entity_update() or
    // hook_entity_insert(), depending on whether or not this is a
    // new entity. We'll just store the name of hook_entity_insert()
    // and change it if we need to.
    $invocation = 'entity_insert';
    // Now we need to either insert or update the fields which are
    // attached to this entity. We use the same primary_keys logic
    // to determine whether to update or insert, and which hook we
    // need to invoke.
    if (!empty($primary_keys)) {
      $invocation = 'entity_update';
    }
    // Invoke either hook_entity_update() or hook_entity_insert().
    module_invoke_all($invocation, $entity, 'apachesolr_multinutch_site');
    return $entity;
  }

  /**
   * Delete a single entity.
   *
   * Really a convenience function for delete_multiple().
   */
  public function delete($id) {
    $this->delete_multiple(array($id));
  }

  /**
   * Delete one or more apachesolr_multinutch_site entities.
   *
   * Deletion is unfortunately not supported in the base
   * DrupalDefaultEntityController class.
   *
   * @param $site_ids
   *   An array of entity IDs or a single numeric ID.
   */
  public function delete_multiple($ids) {
    $basic_ids = array();
    if (!empty($ids)) {
      $transaction = db_transaction();
      $sites = entity_load('apachesolr_multinutch_site', $ids);
      try {
        foreach ($sites as $entity) {
          // Invoke hook_entity_delete().
          module_invoke_all('entity_delete', $entity, 'apachesolr_multinutch_site');
          $site_ids[] = $entity->site_id;
        }
        db_delete('apachesolr_multinutch_site')
          ->condition('site_id', $site_ids, 'IN')
          ->execute();
      }
      catch (Exception $e) {
        $transaction->rollback();
        watchdog_exception('apachesolr_multinutch', $e);
        throw $e;
      }
    }
  }
}

/**
 * Builds the multisite information for a Solr document.
 *
 * @param ApacheSolrDocument $document
 *   The Solr document we are building up.
 * @param stdClass $site
 *   The entity we are indexing.
 * @param string $entity_type
 *   The type of entity we're dealing with.
 * @param string $env_id
 *
 * @return
 *   Array of document objects
 *
 * @see apachesolr_multisitesearch_generate_metadata()
 */
function apachesolr_multinutch_site_solr_document(ApacheSolrDocument $document, $site, $entity_type, $env_id) {

  // @see function apachesolr_multisitesearch_generate_metadata()
  $document->hash = $site->hash;;
  $document->url = $site->site_url;
  $document->entity_type = 'multisite.meta';
  // Rebuild ID.  @see apachesolr_document_id().
  $document->id = "{$document->hash}/{$document->entity_type}/{$document->entity_id}";
  $document->ss_multisite_meta_sitename = apachesolr_clean_text($site->sitename);
  // teaser field is not searched.
  $document->teaser = apachesolr_clean_text($site->description);
  // Add bundle information to our metadata
  // We index each name as a string for cross-site faceting
  $document->setMultiValue('sm_multisite_meta_bundles', $site->bundle_name);
  if ($site->index_metadata) {
    // The meta tags are indexed as if they are a taxonomy
    // We index each name as a string for cross-site faceting
    // using the vocab name rather than vid in field construction.
    // The dot in the fake vocab name insures it will never conflict with a real one.
    $document->setMultiValue('sm_multisite_meta_taxonomy', "sm_vid_metatag.keywords");
  }
  // Allow alterations to this meta data
  drupal_alter('apachesolr_multisitesearch_metadata', $document);
  //  Generic usecase for future reference. Callbacks can
  //  allow you to send back multiple documents
  return array($document);
}

